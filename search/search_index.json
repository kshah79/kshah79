{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to My Project Page! \ud83d\ude80","text":"<p>Name: Kevin Shah Class: EGR 314 | 12:00 PM - 1:15 PM (Monday/Wednesday) Professor: Dr. Kevin Nichols  </p>"},{"location":"#team-website","title":"\ud83c\udf10 Team Website","text":"<p>\ud83d\udd17 Click here </p>"},{"location":"#about-me","title":"\ud83d\udce2 About Me","text":"<p>\ud83d\ude80 Kevin's EGR 314 Project | Spring 2025 Innovation Showcase </p> <p>\"Hi! I'm Kevin Shah, and this project is a key part of my Spring 2025 Innovation Showcase at Arizona State University. Our vision is to design a cutting-edge, interactive STEM-based device that captivates K-12 students and ignites their passion for science, technology, engineering, and mathematics. With a strong foundation in robotics and embedded systems, I am dedicated to crafting an educational tool that transforms learning into an exciting, hands-on adventure\u2014one that sparks curiosity, inspires creativity, and drives the next generation of innovators.\"</p>"},{"location":"#team-objectives","title":"\ud83d\ude80 Team Objectives","text":"<p>\u2714\ufe0f Develop a Cutting-Edge, Market-Ready Solution Engineer an advanced, interactive device that meets industry benchmarks in both aesthetics and functionality.  </p> <p>\u2714\ufe0f Foster Strong Team Collaboration Maintain clear communication and teamwork to ensure smooth project execution and synergy among members.  </p> <p>\u2714\ufe0f Adhere to Industry Standards &amp; Ensure Scalability Design with modularity in mind, enabling long-term durability, easy maintenance, and adaptability for future enhancements.  </p> <p>\u2714\ufe0f Expand Technical Expertise Apply hands-on experience in robotics, embedded systems, and software development to solve complex engineering challenges.  </p> <p>\u2714\ufe0f Create an Intuitive &amp; Engaging User Experience Develop an interactive, user-friendly design tailored to K-12 students for an immersive learning experience.  </p> <p>\u2714\ufe0f Emphasize Sustainability &amp; Innovation Integrate energy-efficient technology and eco-friendly materials to promote responsible engineering practices.  </p> <p>\u2714\ufe0f Meet Project Deadlines &amp; Optimize Resources Effectively manage time and budget constraints to ensure timely delivery of a fully functional prototype.  </p>"},{"location":"#roles-responsibilities","title":"\ud83d\udccc Roles &amp; Responsibilities","text":"Team Member Role Ethan Peterson Assignment Leader Kevin Shah Documentation Head Sanjit Electrical Head Siddhant PCB Head"},{"location":"API/","title":"API Reference","text":"<p>This page documents the final communication interfaces for our Weather Monitoring &amp; Actuator Control system. It covers both the on-board UART message protocol (between PCBs) and the MQTT-based cloud API. All definitions conform to the EGR 314 class specification and our team\u2019s final message formats.</p>"},{"location":"API/#1-uart-message-protocol","title":"1. UART Message Protocol","text":""},{"location":"API/#11-frame-structure","title":"1.1 Frame Structure","text":"<p>Each inter-PCB message is a fixed 64-byte frame:</p> Byte(s) Field Description 0\u20131 Header <code>0x41 0x5A</code> 2 Source ID <code>uint8_t</code> (<code>\u2018E\u2019=0x45</code>, <code>\u2018K\u2019=0x4B</code>, <code>\u2018S\u2019=0x53</code>, <code>\u2018T\u2019=0x54</code>) 3 Destination ID <code>uint8_t</code> 4\u20135 Message Type <code>uint16_t</code> (see types below) 6\u201361 Payload Up to 56 bytes of data (type-specific encoding) 62\u201363 Footer <code>0x59 0x42</code>"},{"location":"API/#12-message-types-payloads","title":"1.2 Message Types &amp; Payloads","text":"<ol> <li>Set Water Flow </li> <li>Type: <code>0x0001</code> </li> <li>Payload (bytes 6\u20137): <code>uint16_t</code> flow rate in L/min \u00d7 100 (e.g., 10.5 L/min \u2192 1050).  </li> <li> <p>Use: ESP32 or Web \u2192 Motor board.</p> </li> <li> <p>Request Sensor Data </p> </li> <li>Type: <code>0x0002</code> </li> <li>Payload (byte 6): <code>uint8_t</code> sensor ID (1 = DHT11, 2 = BMP180).  </li> <li> <p>Use: ESP32 \u2192 Sensor board.</p> </li> <li> <p>Sensor Data Response </p> </li> <li>Type: <code>0x0003</code> </li> <li>Payload: <ul> <li>Bytes 6\u20137: <code>uint16_t</code> temperature (\u00b0C \u00d7 100)  </li> <li>Bytes 8\u20139: <code>uint16_t</code> humidity (% \u00d7 100)  </li> <li>Bytes 10\u201311: <code>uint16_t</code> water flow (L/min \u00d7 100)  </li> </ul> </li> <li> <p>Use: Sensor board \u2192 ESP32/HMI/Motor board.</p> </li> <li> <p>LCD Update Command </p> </li> <li>Type: <code>0x0004</code> </li> <li>Payload (bytes 6\u201361): ASCII text string (max 56 chars) to display, e.g. <pre><code>Temp: 25.5\u00b0C, Hum: 50.1%, Flow: 10.5 L/min\n</code></pre></li> <li> <p>Use: ESP32 \u2192 HMI board.</p> </li> <li> <p>Cloud Update </p> </li> <li>Type: <code>0x0005</code> </li> <li>Payload (bytes 6\u201361): ASCII-encoded JSON (max 56 bytes), e.g.: <pre><code>{\"temp\":2550,\"hum\":5010,\"flow\":1050}\n</code></pre></li> <li> <p>Use: ESP32 \u2192 Cloud gateway.</p> </li> <li> <p>Error Message </p> </li> <li>Type: <code>0x0006</code> </li> <li>Payload: <ul> <li>Byte 6: <code>uint8_t</code> subsystem ID (1 = PIC18, 2 = ESP32, 3 = Sensor, 4 = Pump, 5 = LCD)  </li> <li>Bytes 7\u201362: ASCII error description (max 56 chars)  </li> </ul> </li> <li>Use: Any board \u2192 ESP32/HMI/Web for fault reporting.</li> </ol>"},{"location":"API/#2-mqtt-cloud-api","title":"2. MQTT Cloud API","text":""},{"location":"API/#21-topic-structure","title":"2.1 Topic Structure","text":"Topic Direction Payload Format Description <code>egr314/teamxyz/request/data</code> Subscribed empty Trigger on-demand sensor poll <code>egr314/teamxyz/response/data</code> Published JSON: <code>{ \"temp\":&lt;int&gt;, \"hum\":&lt;int&gt;, \"flow\":&lt;int&gt; }</code> Periodic or on-demand sensor readings (\u00d7100 scaling) <code>egr314/teamxyz/command/flow</code> Subscribed JSON: <code>{ \"flow\":&lt;int&gt; }</code> Remote pump on/off commands (L/min \u00d7 100) <code>egr314/teamxyz/status/motor</code> Published JSON: <code>{ \"state\":\"on\"|\"off\"|\"rev\" }</code> Acknowledge of motor state changes <code>egr314/teamxyz/status/error</code> Published JSON: <code>{ \"subsys\":&lt;int&gt;, \"msg\":\"&lt;str&gt;\" }</code> Error notifications with subsystem ID and message"},{"location":"API/#22-payload-field-definitions","title":"2.2 Payload Field Definitions","text":"<ul> <li>temp: Ambient temperature (\u00b0C \u00d7 100)  </li> <li>hum: Relative humidity (% \u00d7 100)  </li> <li>flow: Water flow rate (L/min \u00d7 100)  </li> <li>state: Motor status string (one of <code>\"on\"</code>, <code>\"off\"</code>, <code>\"rev\"</code>)  </li> <li>subsys: Subsystem ID matching UART Error Message IDs  </li> <li>msg: Human-readable error description  </li> </ul>"},{"location":"API/#23-quality-safety","title":"2.3 Quality &amp; Safety","text":"<ul> <li>All JSON messages are published with QoS 1 to ensure reliable delivery.  </li> <li>Retained flag is off for request/command topics and on for status topics to support late-joining clients.  </li> <li>Error topics use a distinct namespace (<code>status/error</code>) to allow dashboard widgets to filter only fault conditions.</li> </ul> <p>Note: All identifiers and topic names use lowercase and no spaces, per the class naming conventions. Scaling factors (\u00d7100) ensure integer-only encoding on resource-constrained MCUs.</p>"},{"location":"Appendix/","title":"Team Member Communication Modes","text":"Team Member I = Text II = Email III = Discord Ethan Peterson \u2705 \u2705 \u2705 Kevin Shah \u2705 \u2705 \u2705 Sanjit \u2705 \u2705 \u2705 Siddhant \u2705 \u2705 \u2705 <p>Preference: Text</p>"},{"location":"Appendix/#team-communication-and-coordination","title":"Team Communication and Coordination","text":"<p>Preference: Text</p>"},{"location":"Appendix/#meeting-schedule","title":"Meeting Schedule:","text":"<p>Click or copy the URL into your browser, the URL is open to the public to view.</p>"},{"location":"Appendix/#title-meeting-coordination","title":"Title: Meeting Coordination","text":"<ol> <li>What method will you use to remind yourselves of meetings (a shared calendar?)</li> </ol> <p>Group text reminders.</p> <ol> <li>How will your team go about changing or adding meeting times?</li> </ol> <p>Group text and finding what times work for the team. Sometimes in-person meetings will not be available for everybody, so depending on the situation, the team would have to discover what is necessary to get the required communication.</p> <ol> <li>What's the preferred format for meetings (face-to-face or virtually)?</li> </ol> <p>Face-to-face is ideal for most situations. However, for assignments that are already mentioned, late-night hours work for most individuals. The available hours are a key factor in scheduling meetings.</p> <ol> <li>Are there any other procedures that your team feels are necessary? Describe them.</li> </ol> <p>To-do lists and identifying who is best suited for each task, while ensuring no one works alone on any singular task.</p>"},{"location":"Appendix/#roles-and-responsibilities","title":"Roles and Responsibilities:","text":"Team Member Role Ethan Peterson Assignment Leader Kevin Shah Documentation Head Sanjit Electrical Head Siddhant PCB Head"},{"location":"Appendix/#process-by-which-each-team-member-will-fulfill-each-project-role-and-responsibility","title":"Process by which each team member will fulfill each project role and responsibility:","text":"<p>The team will communicate and volunteer for each role based on what they believe is most impactful toward creating a successful outcome. Identifying who is most tactful at specific tasks will help kick-start this process.</p>"},{"location":"Appendix/#additional-questions","title":"Additional Questions:","text":"<ol> <li>How often will you change project roles?</li> </ol> <p>Team members will change roles as the class demands and depending on the needs of the project.</p> <ol> <li>How will you decide who is assigned to each role?</li> </ol> <p>The team will decide collectively, ensuring that roles align with the tasks that need to be accomplished.</p> <ol> <li>How will team members help one another meet their responsibilities?</li> </ol> <p>Team members will be responsible for taking action, answering communication, and stepping up to new work. Each member is expected to contribute a plan of action to meet team goals. The assignment leader or project manager will oversee and ensure roles are fulfilled.</p> <ol> <li>How will you identify and respond to situations in which the team must adjust roles and responsibilities?</li> </ol> <p>If roles need to change, the team will act quickly and decisively based on the consequences of the situation.</p> <ol> <li>How will you track the team activities and milestones?</li> </ol> <p>By using to-do lists that are regularly updated and communicated through the team's group chat.</p> <ol> <li>How will you assign technical responsibilities to the team members?</li> </ol> <p>The assignment leader or project manager will assign technical responsibilities for tasks, while the meeting leader ensures understanding of the current to-do list.</p>"},{"location":"Appendix/#team-coordination-accountability","title":"Team Coordination &amp; Accountability","text":"<ul> <li> <p>Assignment Deadlines: Establish clear deadlines for each assignment and communicate them to all team members.</p> </li> <li> <p>Progress Checkpoints: Implement intermediate checkpoints to review progress and ensure tasks are on track.</p> </li> <li> <p>Final Review: Schedule a final review meeting before the submission deadline where each team member reviews and \"signs off\" on the assignment.</p> </li> <li> <p>Knowledge and Skill Requirements: Conduct an initial assessment to identify each team member's strengths and areas for improvement. This will be done through a simple team interview.</p> </li> <li> <p>Training and Resources: Provide necessary training and resources to fill any knowledge gaps.</p> </li> <li> <p>Mentorship: We will pair less experienced members with mentors who can guide them through the assignment.</p> </li> <li> <p>Feedback Distribution and Action: Use Google Drive to collect and distribute feedback from design reviews.</p> </li> <li> <p>Action Plan: Develop a clear action plan based on feedback, assigning specific tasks to team members.</p> </li> <li> <p>Follow-Up Meetings: Schedule follow-up meetings to ensure feedback has been acted upon and improvements have been made.</p> </li> </ul>"},{"location":"Appendix/#addressing-missed-contributions-and-accountability","title":"Addressing Missed Contributions and Accountability","text":"<ul> <li> <p>Missed Contributions: Address missed contributions immediately through direct communication with the involved team member.</p> </li> <li> <p>Root Cause Analysis: Identify the reasons for the missed contribution and provide support to resolve any issues.</p> </li> <li> <p>Reassignment: If necessary, reassign tasks to ensure project continuity.</p> </li> <li> <p>Accountability: Clearly define and communicate expectations for each team member.</p> </li> <li> <p>Regular Check-Ins: Hold regular check-in meetings to monitor progress and address any issues early.</p> </li> <li> <p>Peer Accountability: Encourage team members to hold each other accountable through open and respectful communication.</p> </li> <li> <p>Recognizing and Addressing Underperformance: Regularly monitor each team member's performance against set expectations.</p> </li> <li> <p>Support and Improvement Plan: If a team member is underperforming, provide constructive feedback and develop a support plan to help them improve.</p> </li> <li> <p>Consequences: If there is no improvement despite support, the team must consider implementing consequences such as reassigning tasks or, in extreme cases, issuing a \"pink slip\" to remove the team member from the project.</p> </li> </ul>"},{"location":"Bill%20Of%20Materials/","title":"Bill Of Materials","text":"Part Name/Description Unit Quantity Unit Prototype Cost Total Prototype Cost Unit Production Cost Total Production Cost Manufacturer Manufacturer Part # Vendor Link Datasheet Link Supplier Supplier Part # # Ordered Date Submitted to Proff. # Received Surplus Schematic Reference Designators 02981001ZXT 1 $0.00 $0.00 $0.00 $0.00 Littlefuse 02981001ZXT Digikey Datasheet Digikey F3470-ND 1 2/28/2025 -1 F1 609002115121 4 $0.28 $1.12 $0.00 $0.00 Wurth Elektronik 609002115121.00 Digikey Datasheet Digikey 732-13618-ND 2 2/28/2025 -4 J1, J2 AP63203WU-7 2 $1.38 $2.76 $0.00 $0.00 Diodes Incorportated AP63203WU-7 Digikey Datasheet Digikey AP63203WU-7DITR-ND 2 2/28/2025 -2 U1 ILI9341 LCD SPI TFT LCD Display Touch Panel 320x240 TFT LCD 4 $13.99 $55.96 $0.00 $0.00 DIANN B0BNQD38T2 Amazon Datasheet Amazon B0BNQD38T2 3 2/28/2025 -4 I1 10uF 2 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -2 C1 10uF 50V 2 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -2 C2 0.1uF 25V 2 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -2 C3 2x22uF 1 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -1 C4 LED Debug 2 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -2 D1, D3 Through Hole Barrel Jack 12V 2 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -2 J1 3.9uH 1 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -1 L1 DOWNSTREAM 1 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -1 P1 UPSTREAM 1 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -1 P2 10k 2 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -2 R1, R2 220 2 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -2 R3, R4 ESP32-S3-WROOM-1-N4 1 $0.00 $0.00 $0.00 $0.00 Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab Peralta Lab 0 2/28/2025 -1 U2 <p>Total Cost: $59.84</p>"},{"location":"Bill%20Of%20Materials/#useful-links","title":"\ud83d\udd17 Useful Links","text":"<p>\ud83d\udcc4 BOM Spreadsheet </p> <p>\ud83d\uded2 Order Form - Digikey </p> <p>\ud83d\udecd Order Form - Amazon </p>"},{"location":"Bill%20Of%20Materials/#supporting-images","title":"\ud83d\uddbc Supporting Images","text":""},{"location":"Bill%20Of%20Materials/#bom","title":"BOM","text":""},{"location":"Bill%20Of%20Materials/#digikey-bom","title":"Digikey BOM","text":""},{"location":"Bill%20Of%20Materials/#amazon-bom","title":"Amazon BOM","text":""},{"location":"Block_Diagram/","title":"Block Diagram","text":""},{"location":"Block_Diagram/#block-diagram","title":"Block Diagram \ud83d\udcca","text":"<p>Below is the block diagram, providing an overview of the components used in our system and how they interact with teammates' designs. This diagram also highlights how multiple perspectives were considered in designing the LCD module.  </p> <p> </p> <p>\ud83d\udd17 View Full Block Diagram </p>"},{"location":"Block_Diagram/#kevin-shahs-hmi-subsystem-block-diagram","title":"Kevin Shah\u2019s HMI Subsystem Block Diagram","text":""},{"location":"Block_Diagram/#1-decision-making-process","title":"1. Decision-Making Process","text":"<ul> <li>Centralizing Display &amp; Cloud Connectivity </li> <li>Why: The HMI board is the user\u2019s primary touchpoint\u2014both on-site via the SPI LCD and remotely via MQTT\u2014so combining the ESP32\u2019s display-driving and Wi-Fi roles on one PCB minimizes inter-board dependencies.  </li> <li> <p>How: We placed the ILI9341 (SPI LCD) and the ESP32 Wi-Fi module in the same block, wired over SPI for the screen and over the ESP32\u2019s built-in UART and GPIO pins for network/control signals.</p> </li> <li> <p>Power Integrity &amp; Isolation </p> </li> <li>Why: Display updates (especially during backlight changes) and Wi-Fi radio bursts draw significant current. Unstable voltage could corrupt data on the daisy-chain bus.  </li> <li> <p>How: We included a dedicated 3.3 V switching regulator on our HMI board, fed from the 9 V barrel jack, with its own input decoupling caps. The clean 3.3 V rail powers both the ESP32 and the LCD module.</p> </li> <li> <p>UART Daisy-Chain Integration </p> </li> <li>Why: To pass sensor readings and motor commands through the HMI en route between the Sensor board and Motor board, while also listening for messages addressed to \u2018K\u2019.  </li> <li> <p>How: We routed the bus\u2019s RX (Pin 36) and TX (Pin 37) lines into the ESP32\u2019s serial RX/TX pins. Our firmware examines the Source/Dest bytes and either forwards or processes each 64-byte frame.</p> </li> <li> <p>GPIO-Driven User Controls </p> </li> <li>Why: Physical buttons on the HMI allow manual \u201cwater flow override\u201d or \u201cdata refresh\u201d without needing the web interface.  </li> <li> <p>How: We mapped key GPIO pins on the ESP32 to upstream header pins and onboard push-buttons (not shown here), so button presses generate outgoing \u201cSet Water Flow\u201d frames.</p> </li> <li> <p>Modularity &amp; Header Layout </p> </li> <li>Why: Uniform headers across all four PCBs simplify wiring and reduce assembly errors at the showcase.  </li> <li>How: We replicated the 8-pin upstream/downstream header footprint used on other boards. Power, ground, UART, and two GPIO lines occupy the same pins at each stage.</li> </ul>"},{"location":"Block_Diagram/#2-alignment-with-product-requirements","title":"2. Alignment with Product Requirements","text":"Requirement Block Diagram Feature Real-time, local feedback SPI-driven ILI9341 LCD updates in &lt;50 ms after a Type 4 frame. Remote monitoring &amp; control ESP32 Wi-Fi \u2192 MQTT link shown by Wi-Fi icon and cloud arrow. Power stability under dynamic load On-board 3.3 V switching regulator isolates display &amp; radio. Seamless daisy-chain routing RX/TX bus arrows into/out of the ESP32 block for frame forwarding. User-driven overrides GPIO arrow from ESP32 to header supports manual button commands. Ease of assembly &amp; expansion Standardized 8-pin headers match other subsystems, allowing mid-chain additions. <ul> <li>Deterministic Latency: By colocating the display driver and cloud transceiver, we eliminate extra hops\u2014ensuring that once the ESP32 has sensor data, both local and remote updates occur in parallel, keeping total loop time under 500 ms.  </li> <li>Educational Transparency: The diagram\u2019s clear segregation (power, bus, peripherals) helps K\u201312 students trace how electricity and data move through the system.  </li> <li>Scalability: Future enhancements (e.g., adding an additional status LED or a secondary sensor) can tap the same 3.3 V rail, UART bus, and GPIO header pins without redrawing the core block structure.  </li> <li>Reliability: The dedicated regulator and simple header wiring reduce points of failure, vital for a public exhibit environment.</li> </ul>"},{"location":"Component_Selection/","title":"Component Selection","text":""},{"location":"Component_Selection/#introduction","title":"Introduction","text":"<p>This section documents all major components chosen for our final design. New parts considered or added since the last draft are highlighted, and each choice is justified against our product requirements for performance, power, cost, and ease of integration.</p>"},{"location":"Component_Selection/#1-major-component-selection","title":"1. Major Component Selection","text":""},{"location":"Component_Selection/#11-summary-of-final-major-components","title":"1.1 Summary of Final Major Components","text":"Component Part Number / Model Qty Primary Role Microcontroller (Wi-Fi) ESP32-WROOM-32 1 Cloud &amp; HMI controller, UART bridge Microcontroller (Core) PIC18F47Q10 1 Sensor polling, I\u00b2C master, daisy-chain router TFT Display ILI9341 (2.4\u2033 SPI) 1 Local weather &amp; actuator status Temp/Humidity Sensor DHT11 1 Basic environmental sensing Pressure Sensor BMP180 1 Barometric pressure &amp; temperature backup Water Flow Sensor SEN0229 1 Measures chilled-water flow rate Motor Driver IFX92015GAUMA1 1 Actuator control (pump/motor) Voltage Regulator AP63203WU-7 1 9 V \u2192 3.3 V switching regulator <p>Note: Excludes passives, connectors, and push-buttons.</p>"},{"location":"Component_Selection/#12-expanded-component-options-feedback-addressed","title":"1.2 Expanded Component Options &amp; Feedback Addressed","text":"Category New Candidates &amp; Feedback Notes on Selection Microcontroller \u2022 STM32F103C8T6 (rejected)\u2022 RP2040 (considered) 32-bit alternatives had higher cost or lacked Wi-Fi. ESP32\u2019s integrated radio and sufficient RAM won out. Sensors \u2022 BME280 (rejected)\u2022 SHT31 (considered) BMP180 added to improve pressure accuracy; DHT11 retained for simplicity and cost. Display \u2022 SSD1289 3.5\u2033 TFT (rejected)\u2022 Nextion HMI (considered) ILI9341 chosen for SPI simplicity, open-source libraries, and compact SMD modules. Regulator \u2022 LM1117 (considered)\u2022 TPS62840 (considered) AP63203WU-7 selected for 3 A capability and high efficiency at our 0.5 A load. Motor Driver \u2022 L293D (considered)\u2022 DRV8833 (considered) IFX92015 chosen for its integrated protection features and single-package SMD form factor. <p>Feedback Incorporated: - Added BMP180 to address TA suggestion for supporting barometric data. - Included IFX92015GAUMA1 motor driver per lab-demo reliability concerns.</p>"},{"location":"Component_Selection/#2-microcontroller-pinout-configuration","title":"2. Microcontroller Pinout &amp; Configuration","text":""},{"location":"Component_Selection/#21-esp32-devkitc-32ue-pinout","title":"2.1 ESP32-DEVKITC-32UE Pinout","text":"Subsystem Function Pins Used UART (Daisy-Chain) RX / TX GPIO36 (RX), GPIO37 (TX) SPI (ILI9341) SCK / MOSI / CS / DC / RST GPIO18, 23, 5, 2, 4 I\u00b2C SDA / SCL GPIO21, 22 GPIO (Buttons) Refresh / Override Flow GPIO17, GPIO16 Power 3.3 V / GND \u2014 Wi-Fi/BT Internal antenna \u2014"},{"location":"Component_Selection/#22-pic18f47q10-mcc-configuration","title":"2.2 PIC18F47Q10 MCC Configuration","text":"Peripheral Module Pin (RAx/RBx/\u2026) Configuration Notes UART1 TX1 / RX1 RC6 / RC7 115 200 baud, 8N1; Daisy-chain comms I\u00b2C1 SDA1 / SCL1 RC4 / RC3 Master for DHT11 / BMP180 SPI SCK / SDI / SDO RB6 / RB5 / RB7 Driving ILI9341 via SPI (for Kevin\u2019s board) CTMU Touch sense \u2014 Unused ADCs AN0\u2026AN12 Various Unused (except pin-monitoring) Power VDD / VSS VDD / VSS 3.3 V supply from AP63203WU-7 <p>All pins now match the final schematic and reflect lab\u2010demo corrections.</p>"},{"location":"Component_Selection/#3-decision-making-process","title":"3. Decision-Making Process","text":"<p>In assembling this section, I:</p> <ul> <li>Reviewed Product Requirements </li> <li> <p>Real-time updates (&lt; 500 ms), low-power, SMD form-factor, educational clarity.</p> </li> <li> <p>Cataloged Candidate Parts </p> </li> <li> <p>Added BMP180 and RP2040 to the list after in-person feedback; discarded options that failed cost or integration checks.</p> </li> <li> <p>Balanced Trade-Offs </p> </li> <li> <p>Prioritized built-in wireless (ESP32) over external modules, and high-efficiency switching regulators over linear solutions.</p> </li> <li> <p>Aligned with Team Roles </p> </li> <li> <p>Ensured each component fit the PCB footprint and could be tested independently by its owner (Kevin \u2192 ILI9341 &amp; ESP32).</p> </li> <li> <p>Validated in Lab Demos </p> </li> <li>Verified actual current draw, SPI timings, and I\u00b2C reliability before finalizing.</li> </ul> <p>Outcome: Our selected parts meet all electrical, mechanical, and pedagogical goals\u2014and simplify assembly for the Innovation Showcase.</p>"},{"location":"Component_Selection/#4-power-budget","title":"4. Power Budget","text":"Component V<sub>oper</sub> (V) I<sub>avg</sub> (mA) Power (mW) ESP32-WROOM-32 3.3 200 660 PIC18F47Q10 3.3 15 49.5 ILI9341 TFT Display 3.3 80 264 DHT11 3.3 2.5 8.25 BMP180 3.3 0.01 0.033 SEN0229 Flow Sensor 5.0 15 75 IFX92015GAUMA1 Driver 3.3 5 16.5 Subtotal (Logic) \u2014 \u2014 997.3 Water Pump (Actuator) 9.0 100 900 Total System Load \u2014 \u2014 1897.3 Regulator Overhead \u2014 \u2014 5 % loss \u2248 95 Grand Total Draw \u2014 \u2014 \u2248\u20091992 mW <p>Template adapted from original assignment.</p>"},{"location":"Component_Selection/#41-power-budget-analysis","title":"4.1 Power Budget Analysis","text":"<ul> <li>I estimated average currents from datasheets and lab measurements.  </li> <li>Regulator overhead (5 %) accounts for DC/DC conversion losses.  </li> <li>Conclusion: A single AP63203WU-7 (3 A @ 3.3 V) comfortably supplies the 1 A logic load with margin, and our 9 V supply (rated 1 A) supports the 100 mA pump plus overhead.  </li> <li>Implication: No additional heat sinks or power modules are required, and the system operates within safety and efficiency targets.</li> </ul>"},{"location":"Component_Selection/#42-using-the-power-budget-to-estimate-needs-key-conclusions","title":"4.2 Using the Power Budget to Estimate Needs &amp; Key Conclusions","text":"<p>To build the power budget, I followed these steps:</p> <ul> <li>Gathered Current Draw Data </li> <li>Datasheet Values: I extracted typical and active\u2010mode currents from each major component\u2019s datasheet (e.g., ESP32-WROOM-32: 20 mA idle, 240 mA peak during Wi-Fi TX).  </li> <li> <p>Lab Measurements: For dynamic loads (ILI9341 backlight, water pump), I measured currents under representative operating conditions, then averaged them over a duty cycle.</p> </li> <li> <p>Calculated Per-Component Power </p> </li> <li>For each device, I multiplied its average current (I<sub>avg</sub>) by its operating voltage (V<sub>oper</sub>) to get power in milliwatts (P = V\u00b7I).  </li> <li> <p>Example: ESP32 at 3.3 V \u00d7 200 mA \u2192 660 mW.</p> </li> <li> <p>Summed Logic &amp; Actuator Loads Separately </p> </li> <li>Logic Subsystem: ESP32, PIC18F, sensors, display, and driver, totaled ~997 mW.  </li> <li> <p>Actuator (Pump): 9 V \u00d7 100 mA \u2192 900 mW.</p> </li> <li> <p>Added Regulator Overhead </p> </li> <li>Based on the AP63203WU-7 efficiency curve, I assumed a conservative 5 % conversion loss.  </li> <li> <p>Overhead = (Logic Subtotal + Actuator Load) \u00d7 0.05 \u2248 95 mW.</p> </li> <li> <p>Checked Supply Ratings &amp; Margin </p> </li> <li>3.3 V Rail: AP63203WU-7 rated for 3 A (\u224810 W) \u2014 far above our ~300 mA (1 W) requirement, providing &gt;10\u00d7 margin.  </li> <li>9 V Source: Rated at 1 A (9 W), comfortably handles the 1.9 W system load with room for sensor bursts and startup surges.</li> </ul>"},{"location":"Component_Selection/#key-conclusions","title":"Key Conclusions","text":"<ul> <li>Regulator Choice Validated: The AP63203WU-7\u2019s headroom ensures minimal thermal stress even under continuous Wi-Fi and backlight use.  </li> <li>Single Supply Sufficiency: A single 9 V, 1 A adapter supports both logic and pump, simplifying the power architecture and reducing part count.  </li> <li>Thermal &amp; Safety Margins: With &gt;50 % headroom on both rails, the design remains cool under load and tolerates component variances or aging.  </li> <li>Scalability: The ample margin allows future additions (extra sensors, LEDs) without reworking the power system.</li> </ul>"},{"location":"Datasheet/","title":"Datasheet","text":""},{"location":"Datasheet/#datasheets","title":"Datasheets:","text":"<ul> <li>ILI9341</li> <li>609002115121</li> <li>02981001ZXT</li> <li>AP63200</li> </ul>"},{"location":"Datasheet/#schematic-and-pcb","title":"Schematic and PCB","text":"<p>Below is the Schematic and PCB, providing an overview of the components used in our system. This diagram also highlights how multiple perspectives were considered in designing the LCD module.  </p> <p> \ud83d\udd17 View the Schematic </p> <p>\ud83d\udd17 Schematic PDF \ud83d\udd17 PCB PDF </p> <p> \ud83d\udd17 View PCB: Top Layer </p> <p> \ud83d\udd17 View PCB: Bottom Layer </p> <p> \ud83d\udd17 View 3D View of PCB </p>"},{"location":"Datasheet/#e-cad-file","title":"E-Cad File","text":"<p>Download the ECAD File</p>"},{"location":"Datasheet/#gerber-file","title":"Gerber File","text":"<p>Download the ECAD Gerbers</p>"},{"location":"Datasheet/#schematic-functionality-vs-requirements","title":"Schematic Functionality vs. Requirements","text":"<p>Our final HMI\u2010centric schematic brings together power, processing, user I/O, and communications into a single coherent PCB layout. Key functional elements include:</p> <ul> <li>Power Distribution &amp; Regulation </li> <li>A 9 V barrel\u2010jack input feeds the AP63203WU-7 buck regulator, which provides a stable 3.3 V rail for all logic and peripherals.  </li> <li>Decoupling capacitors and ferrite beads isolate the ESP32\u2019s Wi-Fi bursts from sensitive sensor and display circuits.  </li> <li> <p>This arrangement meets our requirement for reliable, low\u2010noise power under both high-current (LCD backlight, Wi-Fi) and low-current (sensors) modes.</p> </li> <li> <p>Microcontroller &amp; Peripheral Interfaces </p> </li> <li>The ESP32\u2019s UART pins are wired to the daisy-chain header, enabling both upstream sensor queries and downstream motor commands without additional multiplexers.  </li> <li>SPI lines to the ILI9341 display (SCK, MOSI, CS, DC, RST) are laid out as short, impedance-controlled traces, ensuring fast, glitch-free updates (&lt;50 ms) in response to new sensor frames.  </li> <li> <p>I\u00b2C pins remain free for future local sensors, satisfying our scalability requirement.</p> </li> <li> <p>User Controls &amp; Feedback </p> </li> <li>Two push-buttons routed to GPIO16/17 give users manual \u201cRefresh\u201d and \u201cOverride Flow\u201d control, with 10 k\u03a9 pull-ups and debounce capacitors ensuring clean, chatter-free inputs.  </li> <li> <p>The 2.4\u2033 TFT display is centrally placed and backlit via a dedicated MOSFET, providing clear, colorful real-time feedback for exhibit visitors.</p> </li> <li> <p>Wireless Connectivity </p> </li> <li>The ESP32\u2019s antenna clearance zone and ground plane keep RF performance optimal, delivering robust MQTT connectivity for remote monitoring.</li> </ul> <p>Together, these elements deliver on our product requirements for real-time local feedback, remote cloud updates, user-driven control, and educational transparency, all while maintaining a compact, single-board form factor.</p>"},{"location":"Datasheet/#design-decisionmaking-process-for-the-schematic","title":"Design &amp; Decision\u2010Making Process for the Schematic","text":"<ul> <li>Requirement Mapping </li> <li>We began by listing every functional requirement (power budget, UI responsiveness, communication paths, safety margins) and mapping them onto schematic blocks.  </li> <li> <p>Power requirements drove regulator and decoupling choices; latency targets drove PCB trace layout for SPI/UART.</p> </li> <li> <p>Component Footprint &amp; Placement </p> </li> <li>We grouped high-noise/high-current components (buck regulator, backlight MOSFET) away from analog lines.  </li> <li> <p>The ESP32 was placed centrally to minimize trace lengths to both the daisychained UART header and the display connectors.</p> </li> <li> <p>Signal Integrity Considerations </p> </li> <li>SPI and UART lines were routed as differential\u2010like pairs with consistent trace impedance.  </li> <li> <p>Pull-ups, series resistors, and ferrites were added to critical lines after lab-demo feedback showed occasional framing errors under load.</p> </li> <li> <p>Iterative Feedback Incorporation </p> </li> <li>After the first revision, TA feedback highlighted that our \u201cOverride Flow\u201d button lacked proper debounce. We added a 0.1 \u00b5F capacitor and 10 k\u03a9 resistor per channel.  </li> <li> <p>Peer review noted Wi-Fi dropouts; we increased the antenna clearance area and added a ground-shield trace.</p> </li> <li> <p>Validation &amp; Final Checks </p> </li> <li>We performed a DRC/DRU check in the CAD tool, then built a rapid prototype to verify power stability, button response, and display updates before freezing the schematic.</li> </ul>"},{"location":"Datasheet/#version-20-hardware-improvements","title":"Version 2.0 Hardware Improvements","text":"<p>Looking ahead to a \u201cVersion 2.0\u201d of this PCB, we would target the following enhancements:</p> <ul> <li>Integrated Sensor Daughter-Cards </li> <li>Why: Right now, external sensors connect via the I\u00b2C bus. Adding small mezzanine connectors for plug-in modules (e.g., BME280, light sensors) would simplify K-12 reconfiguration and reduce wiring errors.  </li> <li> <p>Benefit: Increases the exhibit\u2019s modularity and hands-on learning potential.</p> </li> <li> <p>On-Board Motor Driver MOSFETs </p> </li> <li>Why: Currently, motor control flows through the HMI board only as commands; a dedicated MOSFET stage on the HMI board would allow low-power test actuators (e.g., small fans) directly from this PCB.  </li> <li> <p>Benefit: Enables standalone demo setups without needing the separate motor PCB.</p> </li> <li> <p>USB-C Power &amp; Debug Port </p> </li> <li>Why: Switching from a barrel jack to USB-C PD would modernize the power interface and allow in-circuit debugging/programming via the same connector.  </li> <li> <p>Benefit: Simplifies lab setup and future firmware updates, crucial for iterative educational projects.</p> </li> <li> <p>Enhanced Display Touch Integration </p> </li> <li>Why: Replacing the ILI9341 with a touch-capable TFT (e.g., FT81x series) would provide intuitive, touchscreen controls for data refresh and flow override.  </li> <li> <p>Benefit: Improves user engagement and reduces the need for discrete buttons, streamlining the UX.</p> </li> <li> <p>Power Monitoring &amp; Telemetry </p> </li> <li>Why: Adding current-sense resistors and an INA219/INA226 chip on the 3.3 V rail would let us monitor real-time power consumption and display it on the TFT or in the cloud dashboard.  </li> <li>Benefit: Deepens the educational value by teaching students about power management and system diagnostics.</li> </ul> <p>These Version 2.0 improvements build directly on our existing schematic footprint and trace layout, leveraging freed-up I\u00b2C lines and header pin reserves. They would further satisfy scalability, usability, and educational richness for future iterations.  </p>"},{"location":"Resources/","title":"Resources","text":""},{"location":"Resources/#resources","title":"Resources","text":"<p>Download the Zip Folder for ESP32 provided in the VS Code</p>"},{"location":"Schematic_and_PCB/","title":"Schematic and PCB","text":""},{"location":"Schematic_and_PCB/#schematic-and-pcb","title":"Schematic and PCB","text":"<p>Below is the Schematic and PCB, providing an overview of the components used in our system. This diagram also highlights how multiple perspectives were considered in designing the LCD module.  </p> <p> \ud83d\udd17 View the Schematic </p> <p>\ud83d\udd17 Schematic PDF \ud83d\udd17 PCB PDF </p> <p> \ud83d\udd17 View PCB: Top Layer </p> <p> \ud83d\udd17 View PCB: Bottom Layer </p> <p> \ud83d\udd17 View 3D View of PCB </p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}