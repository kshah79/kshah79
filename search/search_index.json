{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#hi-this-is-kevin-shah","title":"Hi this is Kevin Shah","text":"<p>Hope this works</p>"},{"location":"Appendix/","title":"Appendix","text":"<p>Here is the team member appendix. Here is the actual website of our team: https://ethan-s-team-314.github.io/Team-Organization-and-Charter/Appendix/</p>"},{"location":"Appendix/#team-member-communication-modes","title":"Team Member Communication Modes:","text":"<p>|  Ethan Peterson: I = Text  II = Email III = Discord    |  |  2               I = ?     II = ?     III = ?          | |  3               I = ?     II = ?     III = ?          | |  4               I = ?     II = ?     III = ?          |</p> <p>Preference : Text</p>"},{"location":"Appendix/#meeting-schedule","title":"Meeting Schedule:","text":"<p>https://docs.google.com/spreadsheets/d/1dxgQQWTqI2chtbIeKYItjgQndEoy_80x/edit?gid=1078714301#gid=1078714301 (Click or copy the url into your browser, the url is open to the public to view.)</p>"},{"location":"Appendix/#title-meeting-coordination","title":"Title: Meeting Coordination","text":"<ol> <li>What method will you use to remind yourselves of meetings (a shared calendar?)</li> </ol> <p>Group text reminders.</p> <ol> <li>How will your team go about changing or adding meeting times?</li> </ol> <p>Group text and finding what times work for the team. Sometimes in person meetings will not be available for everybody so depending on the situation the team would have to discover what is necessary in order to get necessary communication.</p> <ol> <li>What's the preferred format for meetings (face-to-face or virtually)?</li> </ol> <p>Face to face is ideal for most situations however for assignments that are already mentioned late night hours is what works for most individuals however hours to meet is the forefront of this meeting creation.</p> <ol> <li>Are there any other procedures that your team feels are necessary? Describe them.</li> </ol> <p>To do lists and finding who is best at what while always ensuring that no one goes at a singular task alone for any reason.</p>"},{"location":"Appendix/#roles-and-responsibilities","title":"Roles and Responsibilities:","text":"<p>|  Ethan Peterson        =             Assignment Leader | |  2                     =                      ?        | |  3                     =                      ?        | |  4                     =                      ?        |   </p>"},{"location":"Appendix/#process-by-which-each-team-member-will-fulfill-each-project-role-and-responsibility","title":"Process by which each team member will fulfill each project role and responsibility:","text":"<p>The team will need to communicate and volunteer for each individual role based on what they believe is the most impactful towards creating a successful team. Who is more tactful at what would be a great starter question for this process.</p>"},{"location":"Appendix/#additional-questions","title":"Additional Questions:","text":"<ul> <li> <p>How often will you change project roles? Team members will change the project roles according to what the class demands of the team.</p> </li> <li> <p>How will you decide who is assigned to each role? The team will decide who occupies what role by collectively deciding what will need to be accomplished by the team.</p> </li> <li> <p>How will team members help one another meet their responsibilities?</p> </li> </ul> <p>By being responsible and stepping up to the task of getting quality work forward, the team will ensure that everyone meets what the team decides as being a responsible team member. A responsible team member fulfills their role, answers communication, steps up and takes action on new work, and a responsable member puts forward a plan of action to get what the team needs to get done. All processes for the team would need to be agreed upon by the assignment leader or project manager due to their responsibility in either assignments or projects.</p> <ul> <li>How will you identify and respond to situations in which the team must adjust roles and responsibilities?</li> </ul> <p>The team identifies this matter by the consequences of the teams actions. If a situation arrises in which a role must change the team will take action quickly and decisively. </p> <ul> <li>How will you track the team activities and milestones?</li> </ul> <p>By our to-do lists that need to be regularly communicated on our teams group chat. </p> <ul> <li>How will you assign technical responsibilities to the team members?</li> </ul> <p>The team assignment leader or project manager will make this responsibility for assignments or projects while the meeting leader is responsible in ensuring that team members understand the current to-do lists.</p>"},{"location":"Appendix/#team-coordination-accountability","title":"Team Coordination &amp; Accountability","text":"<p>Assignment Deadlines: Establish clear deadlines for each assignment and communicate them to all team members.</p> <p>Progress Checkpoints: Implement intermediate checkpoints to review progress and ensure tasks are on track. Final Review: Schedule a final review meeting before the submission deadline where each team member reviews and \"signs off\" on the assignment.</p> <p>Knowledge and Skill Requirements: Conduct an initial assessment to identify each team member's strengths and areas for improvement. For this situation it will be a simple team interview. </p> <p>Training and Resources: Provide necessary training and resources to fill any knowledge gaps.</p> <p>Mentorship: Pair less experienced members with mentors who can guide them through the assignment.</p> <p>Feedback Distribution and Action: Use Google Drive  to collect and distribute feedback from design reviews.</p> <p>Action Plan: Develop a clear action plan based on the feedback, assigning specific tasks to team members to address the feedback.</p> <p>Follow-Up Meetings: Schedule follow-up meetings to ensure feedback has been acted upon and improvements have been made. Addressing Missed Contributions and Accountability</p> <p>Missed Contributions: Address missed contributions immediately through direct communication with the involved team member.</p> <p>Root Cause Analysis: Identify the reasons for the missed contribution and provide support to resolve any issues.</p> <p>Reassignment: If necessary, reassign tasks to ensure project continuity.</p> <p>Accountability: Clearly define and communicate expectations for each team member.</p> <p>Regular Check-Ins: Hold regular check-in meetings to monitor progress and address any issues early.</p> <p>Peer Accountability: Encourage team members to hold each other accountable through open and respectful communication.</p> <p>Recognizing and Addressing Underperformance: Regularly monitor each team member's performance against set expectations.</p> <p>Support and Improvement Plan: If a team member is underperforming, provide constructive feedback and develop a support plan to help them improve.</p> <p>Consequences: If there is no improvement despite support, the team must consider implementing consequences such as reassigning tasks or, in extreme cases, issuing a \"pink slip\" to remove the team member from the project.</p>"},{"location":"Component_Selection/","title":"Component Selection","text":"<p>Introduction: This report includes multiple solutions for each major component of our design. I have considered and documented all the factors like cost, surface-mount compatibility, ease of integration, power efficiency and performance. Each selected component is justified with a strong rationale based on the project requirements.</p> <p>Major Component Selection</p> <p>2.1 Microcontroller Selection: The microcontroller is the most crucial part responsible for processing sensor data and managing communication and executing the tasks between different modules and components.</p> <p>Microcontroller Description Photo Pros Cons Cost Link Microchip PIC18F47Q10 8 Bit microcontroller, provides UART interfaces, SMD Package</p> <p>Runs on low power, supports UART Communication, suitable for our modular system Less processing power (Compared to 32 bit MCUs) $0.00  Link ESP32-WROOM-32 32 Bit MCU with Wi-Fi and Bluetooth power</p> <p>High performance, and wireless communication Requires more power (compared to microchip PIC) $0.00 Link STM32F103C8T6 32 Bit ARM Cortex - M3</p> <p>Most powerful than the other 2, efficient and widely used in industry appliances Complex to program and will require additional cost to purchase as it is not provided in the class $6.08 Link</p> <p>Microcontroller Requirements and Pin Allocation</p> <p>Peripheral Requirement UART Minimum 3 as it is required for communication between modules I2C Required for LCD and sensor Communication ADC Required for water turbine sensor input GPIO Needed for additional controls and indicators PWM Needed for LED indicators or actuators Power and GND Stable 3.3V and 5V power </p> <p>Optimal Choice: The PIC18F47Q10 was chosen because of its efficient power consumption, UART communication requirements, and MPLAB X compatibility. Additionally, this component is offered in an SMD packaging, guaranteeing adherence to EGR 314 specifications.</p> <p>2.2 Wi-Fi Module: Since our system required wireless communication, I have evaluated multiple Wi-Fi enabled systems.</p> <p>Wi_Fi Module Description Photo Pros Cons Cost Link ESP32-WROOM-32 Integrated Wi-Fi and Bluetooth module which is used in many IOT appliances</p> <p>High performance, Dual Core. Provided in the class Requires custom PCB design with respect to our system. $0.00  Link ESP32-ESP8266-12E-32 Lower cost WiFi module with UART Support</p> <p>High performance, and wireless communication Power efficiency, low cost $10.00 Link RN4020 Bluetooth module Bluetooth module</p> <p>Uses less power to run (compared to other two) No WiFi, limited flexibility $11.61 Link</p> <p>ESP32 pinout and Allocation:</p> <p>Peripheral ESP32 Pin UART RX/TX GPIO1, GPIO3 I2C SDA, SCL GPIO21, GPIO22 SPI GPIO5, GPIO18, GPIO19, GPIO23 ADC Input GPIO34 PWM Output GPIO25 Power And Ground 3.3V, GND</p> <p>Optimal Choice: ESP32-WROOM-32 is selected due to its built-in Wi-Fi and compatibility with the system. Also it has been provided in the class so no additional cost to purchase it. This module will directly be integrated onto the PCB in an SMD format.</p> <p>2.3 Temperature and Humidity Sensor: The system required a reliable sensor to measure the external conditions.</p> <p>Sensor Description Photo Pros Cons Cost Link DHT11 Digital Temperature and humidity sensor</p> <p>Low cost, easy interface and widely available Less accurate than DHT22 $7.00  Link DHT22 Higher precision than DHT11, and a better temperature range.</p> <p>Improved accuracy Slightly more expensive $8.90 Link SHT31 High-accuracy sensor with I2C Communication</p> <p>Most accurate among the others and fast response time Most expensive. $9.70 Link</p> <p>2.4 Water Flow Sensor Selection: To monitor the flow of water.</p> <p>Sensor Description Photo Pros Cons Cost Link DFRobot SEN0229 5V Water turbine sensor</p> <p>Compact, Easy to interface Requires 5V power source $8.16  Link YF-S201 Hall effect-based water flow </p> <p>Improved accuracy Required additional conditioning circuit $9.50 Link FS300A High precision industrial grade sensor</p> <p>Most accurate among the others and fast response time Most expensive. $11.00 Link</p> <p>Optimal Choice: DFRobot SEN0229 was chosen because of has sufficient precision and simplicity of integration with our system. Integration that is compatible with SMD must be supported by the design.</p> <p>2.5 LCD Display Selection: To display real time sensor data, we compared different LCD options.</p> <p>LCD Display Description Photo Pros Cons Cost Link East Rising ERM1602FS-6 16*2 character LCD with I2C interface</p> <p>Low cost, easy interface and widely available Requires external I2C module $2.55  Link HD44780 1602 Standard 16*2 character LCD</p> <p>Widely supported Requires more GPIO pins $3.00 Link SSD1306 OLED High-contrast OLED Display</p> <p>Compact and modern More expensive $3.70 Link</p> <p>Optimal Choice:  EastRising ERM1602FS-6 \u2013 Chosen due to its alignment with our design and minimal power usage. The screen needs to be connected directly without utilizing a pre-assembled daughterboard.</p> <p>ESP32 Table</p> <p>ESP 32 Info ESP32-WROOM-32 Model ESP32-DEVKITC-32UE Product Page URL Product Page Link ESP32-WROOM-32 Datasheet URL Link ESP32-WROOM-32 Technical Reference Manual URL Technical Reference manual link Vendor Link Vendor Link Code examples Code Example Link External Resources URL Eternal Resource from Arduino Link Unit Cost $10.00 Absolute Maximum Current for entire IC 500 mA Supply Voltage Range Min. 2.3V/ Nominal 3.3V / Max. 3.6V Maximum GPIO Current (per Pin) 40mA Supports External Interrupts ? Yes Required Programming Hardware, cost, and URL USB to Serial Adapter</p> <p>Module</p>"},{"location":"Component_Selection/#available","title":"Available","text":"<p>Needed Associated Pins UART 3 1 GPIO1 / GPIO3 SPI 3 1 GPIO19 / GPIO23 / GPIO18 / GPIO5 I2C 2 1 GPIO21 / GPIO22 GPIO 39 Varies * ADC 18 1 GPIO34 LED PWM Multiple 1 GPIO25 Motor PWM Multiple 1 * USB Programmer 1 1 USB D+ / USB D-</p> <p>Parametric Result for ESP32-WROOM-32</p> <p>PIC Table</p> <p>PIC Info Microchip PIC18F47Q10 Model PIC18F47Q10 Product Page URL Product Page Link Datasheet URL(s) Datasheet Link Application Notes URL(s) Application Notes Link Vendor link Vendor Link Code Examples Microchip MPLAB Examples External Resources URL(s) PIC18 Tutorials on YouTube Unit cost \\(15.30 Absolute Maximum Current for entire IC 250 mA Supply Voltage Range Min: 1.8V / Nominal: 3.3V / Max: 5.5V Maximum GPIO current (per pin) 25 mA Supports External Interrupts? Yes Required Programming Hardware, Cost, URL PICkit4 (~\\)50)</p> <p>Module</p>"},{"location":"Component_Selection/#available_1","title":"Available","text":"<p>Needed Associated Pins GPIO 36 Varies Varies ADC 14 1 ANx Pins UART 2 1 TX/RX Pins SPI 1 1 SCK / MOSI / MISO I2C 1 1 SDA / SCL PWM Multiple 1 SPI ICSP 1 1 PGD / PGC</p> <p>Link of the parametric Result for PIC18F47Q10</p> <p>Personal Responsibilities:  As an essential team member, I oversee the management of the LCD module in our project. My duties involve maintaining effective communication between the microcontroller and the display, setting up the I2C interface, and developing firmware to present pertinent data. Furthermore, I will manage the power needs for the LCD module, making sure it functions effectively within the system's limitations.</p> <p>In addition to the display, I am also tasked with working alongside other subsystems to guarantee smooth data integration. This involves troubleshooting signal integrity problems, enhancing refresh rates for improved clarity, and confirming compatibility with the ESP32 microcontroller. I will additionally participate in testing and verifying the LCD's performance in various environmental conditions, guaranteeing reliability and responsiveness in the final product.</p> <p>MPLABX Project for PIC18F47Q10</p> <p>Entire Image</p> <p>The Microchip PIC18F47Q10 is a 40-pin microcontroller crafted for efficient, low-power performance applications.  The left portion of the pinout features analog and digital I/O ports, including RA0-RA7, RE0-RE2, and RC0-RC3, which can be set up for multiple roles such as ADC, GPIO, and communication interfaces.  The right side includes RB0-RB7 and RD0-RD7, offering extra GPIO, PWM, and peripheral connectivity choices.  VDD and VSS provide power and ground connections for the microcontroller.  The MCLR (pin 1) serves the purpose of external reset functionality.  This pin configuration provides effective data handling, energy distribution, and communication functionalities, making it a perfect option for embedded systems that need UART, SPI, I2C, ADC, and PWM integration.</p> <p>Pinout Diagram for ESP32-WROOM-32</p> <p>Peripheral Pin Allocation For ESP32-WROOM-32</p> <p>Peripheral Assigned Pin(s) Notes Power (3.3V) 3V3 Main power supply Ground (GND) GND Ground connection UART TX GPIO1 Transmit Data (TX) UART RX GPIO3 Receive Data (RX) I2C SDA GPIO21 Data Line for I2C I2C SCL GPIO22 Clock Line for I2C SPI MISO GPIO19 Master In Slave Out SPI MOSI GPIO23 Master Out Slave In SPI CLK GPIO18 Clock Line for SPI SPI CS GPIO5 Chip Select for SPI ADC Input GPIO34 Used for analog sensor input DAC Output GPIO25 Digital-to-Analog output PWM Output (LED) GPIO26 PWM signal for LEDs PWM Output (Motor) GPIO27 PWM signal for motor control</p> <p>The ESP32-WROOM-32 microcontroller needs precise pin assignment to guarantee effective communication and operation among all peripherals.  The 3.3V (3V3) power supply delivers the required operating voltage, whereas the GND pin acts as the ground reference.  UART communication uses GPIO1 (TX) and GPIO3 (RX) to enable serial data transmission. In I2C communication, GPIO21 (SDA) and GPIO22 (SCL) manage data transfer and clock synchronization.  SPI communication, crucial for fast data transfers, employs GPIO19 (MISO), GPIO23 (MOSI), GPIO18 (CLK), and GPIO5 (CS) for master-slave communication.  The analog input (ADC) is controlled by GPIO34, facilitating sensor connections, whereas GPIO25 (DAC Output) offers digital-to-analog conversion capabilities for audio and additional analog uses.  PWM outputs, such as GPIO26 (for LED control) and GPIO27 (for motor control), provide seamless modulation for lighting and activation functions.  This pin layout enhances the ESP32's functionality, guaranteeing effective power management, smooth communication, and strong peripheral support for the project.</p>"},{"location":"static/node_modules/mathjax/","title":"MathJax","text":""},{"location":"static/node_modules/mathjax/#beautiful-math-in-all-browsers","title":"Beautiful math in all browsers","text":"<p>MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers.  It was designed with the goal of consolidating the recent advances in web technologies into a single, definitive, math-on-the-web platform supporting the major browsers and operating systems.  It requires no setup on the part of the user (no plugins to download or software to install), so the page author can write web documents that include mathematics and be confident that users will be able to view it naturally and easily.  Simply include MathJax and some mathematics in a web page, and MathJax does the rest.</p> <p>Some of the main features of MathJax include:</p> <ul> <li> <p>High-quality display of LaTeX, MathML, and AsciiMath notation in HTML pages</p> </li> <li> <p>Supported in most browsers with no plug-ins, extra fonts, or special   setup for the reader</p> </li> <li> <p>Easy for authors, flexible for publishers, extensible for developers</p> </li> <li> <p>Supports math accessibility, cut-and-paste interoperability, and other   advanced functionality</p> </li> <li> <p>Powerful API for integration with other web applications</p> </li> </ul> <p>See http://www.mathjax.org/ for additional details about MathJax, and https://docs.mathjax.org for the MathJax documentation.</p>"},{"location":"static/node_modules/mathjax/#mathjax-components","title":"MathJax Components","text":"<p>MathJax version 3 uses files called components that contain the various MathJax modules that you can include in your web pages or access on a server through NodeJS.  Some components combine all the pieces you need to run MathJax with one or more input formats and a particular output format, while other components are pieces that can be loaded on demand when needed, or by a configuration that specifies the pieces you want to combine in a custom way.  For usage instructions, see the MathJax documentation.</p> <p>Components provide a convenient packaging of MathJax's modules, but it is possible for you to form your own custom components, or to use MathJax's modules directly in a node application on a server.  There are web examples showing how to use MathJax in web pages and how to build your own components, and node examples illustrating how to use components in node applications or call MathJax modules directly.</p>"},{"location":"static/node_modules/mathjax/#whats-in-this-repository","title":"What's in this Repository","text":"<p>This repository contains only the component files for MathJax, not the source code for MathJax (which are available in a separate MathJax source repository).  These component files are the ones served by the CDNs that offer MathJax to the web.  In version 2, the files used on the web were also the source files for MathJax, but in version 3, the source files are no longer on the CDN, as they are not what are run in the browser.</p> <p>The components are stored in the <code>es5</code> directory, and are in ES5 format for the widest possible compatibility.  In the future, we may make an <code>es6</code> directory containing ES6 versions of the components.</p>"},{"location":"static/node_modules/mathjax/#installation-and-use","title":"Installation and Use","text":""},{"location":"static/node_modules/mathjax/#using-mathjax-components-from-a-cdn-on-the-web","title":"Using MathJax components from a CDN on the web","text":"<p>If you are loading MathJax from a CDN into a web page, there is no need to install anything.  Simply use a <code>script</code> tag that loads MathJax from the CDN.  E.g.,</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>See the MathJax documentation, the MathJax Web Demos, and the MathJax Component Repository for more information.</p>"},{"location":"static/node_modules/mathjax/#hosting-your-own-copy-of-the-mathjax-components","title":"Hosting your own copy of the MathJax Components","text":"<p>If you want to host MathJax from your own server, you can do so by installing the <code>mathjax</code> package using <code>npm</code> and moving the <code>es5</code> directory to an appropriate location on your server:</p> <pre><code>npm install mathjax@3\nmv node_modules/mathjax/es5 &lt;path-to-server-location&gt;/mathjax\n</code></pre> <p>Note that we are still making updates to version 2, so include <code>@3</code> when you install, since the latest chronological version may not be version 3.</p> <p>Alternatively, you can get the files via GitHub:</p> <pre><code>git clone https://github.com/mathjax/MathJax.git mj-tmp\nmv mj-tmp/es5 &lt;path-to-server-location&gt;/mathjax\nrm -rf mj-tmp\n</code></pre> <p>Then (in either case) you can use a script tag like the following:</p> <pre><code>&lt;script id=\"MathJax-script\" async src=\"&lt;url-to-your-site&gt;/mathjax/tex-chtml.js\"&gt;&lt;/script&gt;\n</code></pre> <p>where <code>&lt;url-to-your-site&gt;</code> is replaced by the URL to the location where you moved the MathJax files above.</p> <p>See the documentation for details.</p>"},{"location":"static/node_modules/mathjax/#using-mathjax-components-in-a-node-application","title":"Using MathJax components in a node application","text":"<p>To use MathJax components in a node application, install the <code>mathjax</code> package:</p> <pre><code>npm install mathjax@3\n</code></pre> <p>(we are still making updates to version 2, so you should include <code>@3</code> since the latest chronological version may not be version 3).</p> <p>Then require <code>mathjax</code> within your application:</p> <pre><code>require('mathjax').init({ ... }).then((MathJax) =&gt; { ... });\n</code></pre> <p>where the first <code>{ ... }</code> is a MathJax configuration, and the second <code>{ ... }</code> is the code to run after MathJax has been loaded.  E.g.</p> <pre><code>require('mathjax').init({\nloader: {load: ['input/tex', 'output/svg']}\n}).then((MathJax) =&gt; {\nconst svg = MathJax.tex2svg('\\\\frac{1}{x^2-1}', {display: true});\nconsole.log(MathJax.startup.adaptor.outerHTML(svg));\n}).catch((err) =&gt; console.log(err.message));\n</code></pre> <p>Note: this technique is for node-based application only, not for browser applications.  This method sets up an alternative DOM implementation, which you don't need in the browser, and tells MathJax to use node's <code>require()</code> command to load external modules.  This setup will not work properly in the browser, even if you webpack it or bundle it in other ways.</p> <p>See the documentation and the MathJax Node Repository for more details.</p>"},{"location":"static/node_modules/mathjax/#reducing-the-size-of-the-components-directory","title":"Reducing the Size of the Components Directory","text":"<p>Since the <code>es5</code> directory contains all the component files, so if you are only planning one use one configuration, you can reduce the size of the MathJax directory by removing unused components. For example, if you are using the <code>tex-chtml.js</code> component, then you can remove the <code>tex-mml-chtml.js</code>, <code>tex-svg.js</code>, <code>tex-mml-svg.js</code>, <code>tex-chtml-full.js</code>, and <code>tex-svg-full.js</code> configurations, which will save considerable space.  Indeed, you should be able to remove everything other than <code>tex-chtml.js</code>, and the <code>input/tex/extensions</code>, <code>output/chtml/fonts/woff-v2</code>, <code>adaptors</code>, <code>a11y</code>, and <code>sre</code> directories.  If you are using the results only on the web, you can remove <code>adaptors</code> as well.</p> <p>If you are not using A11Y support (e.g., speech generation, or semantic enrichment), then you can remove <code>a11y</code> and <code>sre</code> as well (though in this case you may need to disable the assistive tools in the MathJax contextual menu in order to avoid MathJax trying to load them when they aren't there).</p> <p>If you are using SVG rather than CommonHTML output (e.g., <code>tex-svg.js</code> rather than <code>tex-chtml.js</code>), you can remove the <code>output/chtml/fonts/woff-v2</code> directory.  If you are using MathML input rather than TeX (e.g., <code>mml-chtml.js</code> rather than <code>tex-chtml.js</code>), then you can remove <code>input/tex/extensions</code> as well.</p>"},{"location":"static/node_modules/mathjax/#the-component-files-and-pull-requests","title":"The Component Files and Pull Requests","text":"<p>The <code>es5</code> directory is generated automatically from the contents of the MathJax source repository.  You can rebuild the components using the command</p> <pre><code>npm run make-es5 --silent\n</code></pre> <p>Note that since the contents of this repository are generated automatically, you should not submit pull requests that modify the contents of the <code>es5</code> directory.  If you wish to submit a modification to MathJax, you should make a pull request in the MathJax source repository.</p>"},{"location":"static/node_modules/mathjax/#mathjax-community","title":"MathJax Community","text":"<p>The main MathJax website is http://www.mathjax.org, and it includes announcements and other important information.  A MathJax user forum for asking questions and getting assistance is hosted at Google, and the MathJax bug tracker is hosted at GitHub.</p> <p>Before reporting a bug, please check that it has not already been reported.  Also, please use the bug tracker (rather than the help forum) for reporting bugs, and use the user's forum (rather than the bug tracker) for questions about how to use MathJax.</p>"},{"location":"static/node_modules/mathjax/#mathjax-resources","title":"MathJax Resources","text":"<ul> <li>MathJax Documentation</li> <li>MathJax Components</li> <li>MathJax Source Code</li> <li>MathJax Web Examples</li> <li>MathJax Node Examples</li> <li>MathJax Bug Tracker</li> <li>MathJax Users' Group</li> </ul>"}]}